// Zaimoni.STL/augment.STL/typetraits

#ifndef ZAIMONI_AUGMENT_STL_TYPE_TRAITS
#define ZAIMONI_AUGMENT_STL_TYPE_TRAITS 1

#include <inttypes.h>
#include <limits>
#include <type_traits>
#include <concepts>
#include "../zero.hpp"

namespace zaimoni {

// replicate efficient function declaration types from Boost
template<class T> struct const_param
{
	typedef typename std::conditional<sizeof(unsigned long long)>=sizeof(T) , const T , typename std::add_lvalue_reference<const T>::type >::type type;
};

template<class T> struct return_copy
{
	typedef typename std::conditional<sizeof(unsigned long long)>=sizeof(T) , T , 
		typename std::add_lvalue_reference<const T>::type 
	>::type type;
};

// http://ldionne.com/2015/11/29/efficient-parameter-pack-indexing/
// not recommended; just works as expected
template <size_t I, typename T, typename ...Ts>
struct nth_element_impl {
	using type = typename nth_element_impl<I - 1, Ts...>::type;
};

template <typename T, typename ...Ts>
struct nth_element_impl<0, T, Ts...> {
	using type = T;
};

template <size_t I, typename ...Ts>
using nth_element = typename nth_element_impl<I, Ts...>::type;

// work around when we need constructors that aren't generic enough to template
// placeholder; forces compile error without specialization.  Idea is STL make_pair or make_tuple
template<class T> struct _make {};

template<class T, class... Args>
auto __make(Args... args) {
	static _make<T> staging;
	return staging(args...);
}

template<class T, class... Args>
auto make(Args... args) {
	using R = std::remove_cv_t<std::remove_reference_t<T> >;
	return __make<R>(args...);
}

// type demotion.
template<class T> struct precise_demote
{
	using type = void;
};

// Handle Clang, MSVC++: sizeof(long double)==sizeof(double)
template<>
struct precise_demote<long double>
{
	using type = std::conditional_t<sizeof(long double) == sizeof(double), double, void>;
};

// count how many real-dimensional coordinates are needed to represent the type
template<class T> struct R_coords
{
	enum { value = std::is_arithmetic<T>::value ? 1 : 0 };
};

// we don't have good compile-time detection for operators, and STL conflicts with mathematics at times anyway
template<class T> struct op_works
{
	enum {
		add = std::is_arithmetic<T>::value,
		sub = std::is_arithmetic<T>::value,
		mult = std::is_arithmetic<T>::value,
		div = std::is_arithmetic<T>::value,
		negate = std::is_arithmetic<T>::value,	// unsigned integral types should not be surprising when modulo arithmetic kicks in
		less_than = std::is_arithmetic<T>::value,	// unsigned integral types should not be surprising when modulo arithmetic kicks in
		has_negative_zero = std::is_floating_point<T>::value
	};
};

// work around issues in type_traits
template<class T> struct types
{
	typedef typename std::make_unsigned<T>::type norm;
};

template<> struct types<long double>
{
	typedef long double norm;
};

template<> struct types<double>
{
	typedef double norm;
};

template<> struct types<float>
{
	typedef float norm;
};

// abs is taken by the standard library.
// norm is meant to be the "typical" measure of absolute value; for real numbers should be abs
template<std::floating_point F> constexpr F norm(F x) { return 0 <= x ? x : -x; }
template<std::unsigned_integral U> constexpr U norm(U x) {return x;}

template<std::signed_integral I>
constexpr typename types<I>::norm norm(I x) {
	if constexpr(std::numeric_limits<I>::min() < -std::numeric_limits<I>::max()) {
		// XXX 2's complement integer minimum is undefined behavior to negate
		if (-std::numeric_limits<I>::max() > x) return (typename std::make_unsigned<I>::type)(std::numeric_limits<I>::max()) + (typename std::make_unsigned<I>::type)(-std::numeric_limits<I>::max() - x);
	};
	return 0 <= x ? x : -x;
}

// for when we want operator- to be non-negative
template<class T>
auto pos_diff(const T& upper, const T& lower) -> typename types<T>::norm
{
	assert(lower <= upper);
	if constexpr (0 <= std::numeric_limits<T>::min()) return upper - lower;
	else if constexpr(std::is_same_v<T, typename types<T>::norm>) return upper - lower;	// no evasion this way for floating point
	else {
		if (0 <= lower) return upper - lower;
		const auto evade_overflow = lower + std::numeric_limits<T>::max();
		if (evade_overflow >= upper) return upper - lower;
		return (typename types<T>::norm)(std::numeric_limits<T>::max()) + (typename types<T>::norm)(upper - evade_overflow);
	}
}

// interval arithmetic doesn't play nice with operator== (it is definitely possible for neither == and != to be positively true)
template<class T>
struct definitely
{
	static bool equal(typename const_param<T>::type lhs, typename const_param<T>::type rhs) { return lhs == rhs; }
	static bool unequal(typename const_param<T>::type lhs, typename const_param<T>::type rhs) { return lhs != rhs; }
};

template<class T>
bool definitely_equal(T& lhs, T& rhs) { return definitely<typename std::remove_cv<T>::type>::equal(lhs,rhs); }

template<class T>
bool definitely_equal(const T& lhs, T& rhs) { return definitely<typename std::remove_cv<T>::type>::equal(lhs, rhs); }

template<class T>
bool definitely_equal(T& lhs, const T& rhs) { return definitely<typename std::remove_cv<T>::type>::equal(lhs, rhs); }

template<class T>
bool definitely_unequal(T& lhs, T& rhs) { return definitely<typename std::remove_cv<T>::type>::unequal(lhs, rhs); }

template<class T>
bool definitely_unequal(const T& lhs, T& rhs) { return definitely<typename std::remove_cv<T>::type>::unequal(lhs, rhs); }

template<class T>
bool definitely_unequal(T& lhs, const T& rhs) { return definitely<typename std::remove_cv<T>::type>::unequal(lhs, rhs); }

// correct-size type estimation
template<uintmax_t n>
struct min_unsigned
{
	typedef typename std::conditional<std::numeric_limits<unsigned int>::max() <= n,
			typename std::conditional<std::numeric_limits<unsigned char>::max() <= n,
				unsigned char,
				typename std::conditional<std::numeric_limits<unsigned short>::max() <= n,
					unsigned short,
					unsigned int>::type
			>::type,
			typename std::conditional<std::numeric_limits<unsigned long>::max() <= n,	unsigned long, uintmax_t>::type>::type type;
};

// hooks for some common tests that easily cause compiler errors when done naively, or can be inefficient on more complex types
template<class T>
struct type_traits_arithmetic_aux {	// defaults for std::is_arithmetic<T>::value
	static constexpr bool is_zero(typename const_param<T>::type x) { return 0 == x; }	// could use kronecker delta for this
	static constexpr bool contains_zero(typename const_param<T>::type x) { return 0 == x; }
	static constexpr bool is_positive(typename const_param<T>::type x) { return 0 < x; }
	static constexpr bool is_negative(typename const_param<T>::type x) { return 0 > x; }
	static constexpr bool is_one(typename const_param<T>::type x) { return 1 == x; }
};

template<class T>
constexpr bool is_zero(const T& x) { return type_traits_arithmetic_aux<typename std::remove_cv<T>::type>::is_zero(x); }

template<class T>
constexpr bool contains_zero(const T& x) { return type_traits_arithmetic_aux<typename std::remove_cv<T>::type>::contains_zero(x); }

template<class T>
constexpr bool is_positive(const T& x) { return type_traits_arithmetic_aux<typename std::remove_cv<T>::type>::is_positive(x); }

template<class T>
constexpr bool is_negative(const T& x) { return type_traits_arithmetic_aux<typename std::remove_cv<T>::type>::is_negative(x); }

// intent is that the following are mutually exclusive and exhaustive for types that subset real numbers: contains_zero, is_positive, is_negative

template<class T>
constexpr int sgn(const T& x)
{
	if (is_positive(x)) return 1;
	if (is_negative(x)) return -1;
	return 0;
}

template<class T>
constexpr bool is_one(const T& x) { return type_traits_arithmetic_aux<typename std::remove_cv<T>::type>::is_one(x); }

template<class T>
constexpr typename std::enable_if<std::is_floating_point<T>::value, bool>::type is_negative_one(T x)	// could use kronecker delta for this, *except* that would fail for unsigned integers
{
	return -1 == x;
}

template<class T>
constexpr typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value, bool>::type is_negative_one(T x)
{
	return -1 == x;
}

template<class T>
constexpr typename std::enable_if<std::is_integral<T>::value && !std::is_signed<T>::value, bool>::type is_negative_one(T x)
{
	return false;
}

// clamped signed arithmetic
template<class T>
struct clamped_signed
{
	static_assert(std::is_integral<T>::value&& std::is_signed<T>::value, "signed integers only");
	static void sum_assign(T& dest, T delta) {
		if (0 < delta) {
			if (std::numeric_limits<intmax_t>::max()-delta <= dest) dest = std::numeric_limits<intmax_t>::max();
			else dest += delta;
		}
		else if (0 > delta) {
			if (std::numeric_limits<intmax_t>::min()-delta >= dest) dest = std::numeric_limits<intmax_t>::min();
			else dest += delta;
		}
	}

	static void diff_assign(T& dest, T delta) {
		if (0 < delta) {
			if (0 > dest && std::numeric_limits<intmax_t>::min() + delta >= dest) dest = std::numeric_limits<intmax_t>::min();
			else dest -= delta;
		}
		else if (0 > delta) {
			if (0 < dest && std::numeric_limits<intmax_t>::max() + delta <= dest) dest = std::numeric_limits<intmax_t>::max();
			else dest -= delta;
		}
	}
};

template<class T>
typename std::enable_if<std::is_integral<T>::value&& std::is_signed<T>::value, void>::type clamped_sum_assign(typename std::remove_cv<T>::type& dest, T delta) { clamped_signed<typename std::remove_cv<T>::type>::sum_assign(dest, delta); }

template<class T>
typename std::enable_if<std::is_integral<T>::value&& std::is_signed<T>::value, void>::type clamped_diff_assign(typename std::remove_cv<T>::type& dest, T delta) { clamped_signed<typename std::remove_cv<T>::type>::diff_assign(dest,delta); }

// XXX extending cmath functions to integers with templates does not work (templates are lower priority than functions
// when resolving overloads)
template<std::integral I> constexpr bool isINF(I x) { return false; }
template<std::integral I> constexpr bool isFinite(I x) { return true; }
template<std::integral I> constexpr bool isNaN(I x) { return false; }
template<std::signed_integral S> constexpr bool signBit(S x) { return 0>x; }
template<std::unsigned_integral U> constexpr bool signBit(U x) { return false; }

template<std::integral I> constexpr I scalBn(I x, int scale)
{
	if (0 <= scale) return x << scale;
	return x >> (-scale);
}

namespace math {

template<std::signed_integral T> int rearrange_diff(T& lhs, T& rhs)
{
	if (0 == lhs) return 0;

	const bool lhs_positive = (0 < lhs);
	if (0 < lhs) {
		if (0 >= rhs) return 0;
		if (lhs <= rhs) {
			rhs -= lhs;
			lhs = 0;
			return 0 == rhs ? -2 : -1;
		} else {
			lhs -= rhs;
			rhs = 0;
			return 0 == lhs ? -2 : 1;
		}
	} else {
		if (0 <= rhs) return 0;
		if (lhs >= rhs) {
			rhs -= lhs;
			lhs = 0;
			return 0 == rhs ? -2 : -1;
		} else {
			lhs -= rhs;
			rhs = 0;
			return 0 == lhs ? -2 : 1;
		}
	}
}


template<class T> struct would_overflow;

template<>
struct would_overflow<uintmax_t>
{
	static constexpr bool sum(uintmax_t lhs, uintmax_t rhs)
	{
		return 0!=lhs && 0!=rhs && std::numeric_limits<uintmax_t>::max()-lhs<rhs;
	}
	static constexpr bool product(uintmax_t lhs, uintmax_t rhs)
	{
		return 1<lhs && 1<rhs && std::numeric_limits<uintmax_t>::max()/lhs<rhs;
	}
};

template<>
struct would_overflow<intmax_t>
{
	static constexpr bool sum(intmax_t lhs, intmax_t rhs)
	{
		// constraints:
		// std::numeric_limits<int_t>::max() >= lhs+rhs
		// std::numeric_limits<int_t>::min() <= lhs+rhs
		return 0<lhs ? (0<rhs && std::numeric_limits<intmax_t>::max()-lhs<rhs)
            : (0>lhs ? (0>rhs && (std::numeric_limits<intmax_t>::min()-lhs)<rhs)
            : false);
	}
	static constexpr bool product(intmax_t lhs, intmax_t rhs)
	{
//		if (0==lhs || 1==lhs) return false;
//		if (0==rhs || 1==rhs) return false;
		return 1<lhs ? (   (1<rhs && std::numeric_limits<intmax_t>::max()/lhs<rhs)
                        || (0>rhs && std::numeric_limits<intmax_t>::min()/lhs>rhs))
			: (0>lhs ? (   (1<rhs && std::numeric_limits<intmax_t>::min()/rhs>lhs)
                        || (0>rhs && std::numeric_limits<intmax_t>::max()/lhs>rhs))
			: false);
	}
};

template<class T>
struct static_cache
{
	template<auto n>
	static std::enable_if_t<std::is_convertible_v<decltype(n), T> && !std::is_scalar<T>::value, typename return_copy<T>::type> as()
	{
		static const T ret(n);
		return ret;
	}

	static std::enable_if_t<std::is_convertible<intmax_t, T>::value && !std::is_scalar<T>::value, T> as3(intmax_t n)
	{
		return T(n);
	}

	static std::enable_if_t<std::is_convertible<uintmax_t, T>::value && !std::is_scalar<T>::value, T> as4(uintmax_t n)
	{
		return T(n);
	}
};

// C++20: use std::is_constant_evaluated as a bypass if no other way to detect a constexpr constructor comes up
template<auto n, class T>
constexpr typename return_copy<std::remove_reference_t<T> >::type int_as()
{
	if constexpr (std::is_arithmetic_v<std::remove_reference_t<T> >) return n;
	else if constexpr (std::is_convertible_v<decltype(n), std::remove_cv_t<std::remove_reference_t<T> > > && !std::is_scalar_v<T>) {
		return static_cache<std::remove_cv_t<std::remove_reference_t<T> > >::template as<n>();
	} else static_assert(unconditional_v<bool,false, T>, "unclear how to convert to target type");
}

template<class T>
constexpr auto int_as(intmax_t n)
{
	if constexpr (std::is_arithmetic_v<std::remove_reference_t<T> >) return n;
	else if constexpr (std::is_convertible_v<decltype(n), std::remove_cv_t<std::remove_reference_t<T> > > && !std::is_scalar_v<T>) {
		return static_cache<std::remove_cv_t<std::remove_reference_t<T> > >::as3(n);
	}
	else static_assert(unconditional_v<bool, false, T>, "unclear how to convert to target type");
}

template<class T>
constexpr auto uint_as(uintmax_t n)
{
	if constexpr (std::is_arithmetic_v<std::remove_reference_t<T> >) return n;
	else if constexpr (std::is_convertible_v<decltype(n), std::remove_cv_t<std::remove_reference_t<T> > > && !std::is_scalar_v<T>) {
		return static_cache<std::remove_cv_t<std::remove_reference_t<T> > >::as4(n);
	}
	else static_assert(unconditional_v<bool, false, T>, "unclear how to convert to target type");
}

#define ZAIMONI_INT_AS_DEFINED(T) (std::is_arithmetic<typename std::remove_reference<T>::type>::value || (std::is_convertible<intmax_t, T>::value && !std::is_scalar<T>::value))

// numerical error calculation -- baseline
template<class T>
struct numerical
{
	enum {
		error_tracking = 0
	};
	typedef std::remove_cv_t<T> exact_type;			// exact version of this type
	typedef std::remove_cv_t<T> exact_arithmetic_type;	// exact version of the individual coordinates of this type

	static constexpr int error(typename const_param<T>::type src) {return 0;}
	static constexpr bool causes_division_by_zero(typename const_param<T>::type src) {return int_as<0,T>()==src;};
};

template<class T>
constexpr bool causes_division_by_zero(T src)
{
	return numerical<std::remove_cv_t<std::remove_reference_t<T> > >::causes_division_by_zero(src);
}

template<class T>
struct mult_inv	// require implementation to not wipe out
{
};

template<class T>
auto mult_invert(const T& src) { return mult_inv<std::remove_cv_t<std::remove_reference_t<T> > >()(src); }

// typical functions
template<uintmax_t n>
struct unsigned_fn
{
	template<class T> constexpr static uintmax_t constant(typename const_param<T>::type rhs) { return n; }
	template<class T> static bool kronecker_delta(typename const_param<T>::type rhs) { return int_as<n,T>()==rhs; }
};

template<intmax_t n>
struct signed_fn
{
	template<class T> constexpr static intmax_t constant(typename const_param<T>::type rhs) { return n; }
	template<class T> static bool kronecker_delta(typename const_param<T>::type rhs) { return int_as<n,T>()==rhs; }
};

}	// namespace math

}	// namespace zaimoni

#endif
