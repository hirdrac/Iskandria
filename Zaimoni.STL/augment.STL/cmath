// Zaimoni.STL/augment.STL/cmath

#ifndef ZAIMONI_AUGMENT_STL_CMATH
#define ZAIMONI_AUGMENT_STL_CMATH 1

#include "type_traits"
#include "../Logging.h"
#include "Zaimoni.STL/Pure.C/auto_int.h"
#include "../c_bitmap.hpp"
#include <float.h>
#include <cmath>
#include <utility>
#include <concepts>

// namespace setup.  Anything we would want for high-precision arithmetic should be imported into both of our namespaces.
// Favor once-and-only-once over technical efficiency.

namespace zaimoni {

	using std::fpclassify;
	using std::sqrt;

namespace math {

	using std::fpclassify;
	using std::sqrt;

}	// namespace math

}	// namespace zaimoni

// intentionally close and re-open namespaces to visually separate intent (reference vs. new definitions)

namespace zaimoni {

/* base 2 logarithm of x; pretend 0 is 1 */
constexpr unsigned int_log2(unsigned long long x) { return 1>=x ? 0 : 1+int_log2(x/2); }

template<class T>
union binary {
};

#if DBL_MANT_DIG==LDBL_MANT_DIG && DBL_MAX_EXP==LDBL_MAX_EXP
template<>
union binary<long double>
{
	static_assert(CHAR_BIT * sizeof(long double) == 1 + int_log2(std::numeric_limits<long double>::max_exponent) + std::numeric_limits<long double>::digits);
	static_assert(sizeof(unsigned long long) == sizeof(long double));

	static constexpr const auto total_bits = 1 + int_log2(std::numeric_limits<long double>::max_exponent) + std::numeric_limits<long double>::digits;
	static constexpr const auto raw_max_exponent = 2 * ((1ULL << int_log2(std::numeric_limits<long double>::max_exponent)) - 1) + 1;

	long double _x;
	struct {
#ifdef ZAIMONI_LITTLE_ENDIAN
		unsigned long long mant : std::numeric_limits<long double>::digits - 1;
		unsigned long long exp : int_log2(std::numeric_limits<long double>::max_exponent) + 1;
		unsigned long long sign : 1;
#else
#error "need to implement binary<long double> for big-endian architectures"
#endif
	};

	constexpr binary(long double src) : _x(src) {};
private:
	constexpr binary(unsigned long long _mant, unsigned long _exp, bool _sign) : mant(_mant), exp(_exp), sign(_sign) {}
public:

	// cross-union field access breaks constexpr, however
	constexpr int exponent() const { return (int)exp - (std::numeric_limits<long double>::max_exponent - 2); }	// C library frexp convention: numeral 1.0 returns 1
	constexpr double mantissa() const { return binary(mant, std::numeric_limits<long double>::max_exponent - 2, sign)._x; }	// C library frexp convention: absolute value in [0.5,1)
};
static_assert(sizeof(binary<long double>) == sizeof(long double));
#elif 64>=LDBL_MANT_DIG
template<>
union binary<long double>
{
	static_assert(CHAR_BIT * 2 * sizeof(unsigned long long) >= 1 + int_log2(std::numeric_limits<long double>::max_exponent) + std::numeric_limits<long double>::digits);
	static constexpr const auto low_exp = CHAR_BIT * sizeof(unsigned long long) - (std::numeric_limits<long double>::digits - 1);
	static constexpr const auto high_exp = int_log2(std::numeric_limits<long double>::max_exponent) + 1 - low_exp;

	static constexpr const auto total_bits = 1 + int_log2(std::numeric_limits<long double>::max_exponent) + std::numeric_limits<long double>::digits;
	static constexpr const auto raw_max_exponent = 2 * ((1ULL << int_log2(std::numeric_limits<long double>::max_exponent)) - 1) + 1;

	long double _x;
	struct {
#ifdef ZAIMONI_LITTLE_ENDIAN
		unsigned long long mant : std::numeric_limits<long double>::digits - 1;
		unsigned long long exp : low_exp;
		typename zaimoni::bitmap<total_bits - CHAR_BIT * sizeof(unsigned long long)>::type exp_2 : high_exp;
		typename zaimoni::bitmap<total_bits-CHAR_BIT*sizeof(unsigned long long)>::type sign : 1;
#else
#error "need to implement binary<long double> for big-endian architectures"
#endif
	};

	constexpr binary(long double src) : _x(src) {};
private:
	constexpr binary(unsigned long long _mant, unsigned long _exp, bool _sign) : mant(_mant), exp(_exp & ((1ULL<<(low_exp+1))-1)), exp_2(_exp >> low_exp), sign(_sign) {}
public:

	// cross-union field access breaks constexpr, however
	constexpr int exponent() const { return (int)(exp + (exp_2 << low_exp)) - (std::numeric_limits<long double>::max_exponent - 2); }	// C library frexp convention: numeral 1.0 returns 1
	constexpr double mantissa() const { return binary(mant, std::numeric_limits<long double>::max_exponent - 2, sign)._x; }	// C library frexp convention: absolute value in [0.5,1)
};
static_assert(sizeof(binary<long double>) == sizeof(long double));
#else
#error need to implement union binary<long double> for large mantissa
#endif

// holding off on long double at this time -- need preprocessor support and MingW64 is using real Intel long double
template<>
union binary<double>
{
	static_assert(CHAR_BIT * sizeof(double) == 1 + int_log2(std::numeric_limits<double>::max_exponent) + std::numeric_limits<double>::digits);
	static_assert(sizeof(unsigned long long) == sizeof(double));

	static constexpr const auto total_bits = 1 + int_log2(std::numeric_limits<double>::max_exponent) + std::numeric_limits<double>::digits;
	static constexpr const auto raw_max_exponent = 2 * ((1ULL << int_log2(std::numeric_limits<double>::max_exponent)) - 1) + 1;

	double _x;
	struct {
#ifdef ZAIMONI_LITTLE_ENDIAN
		unsigned long long mant : std::numeric_limits<double>::digits - 1;
		unsigned long long exp : int_log2(std::numeric_limits<double>::max_exponent) + 1;
		unsigned long long sign : 1;
#else
#error "need to implement binary<double> for big-endian architectures"
#endif
	};

	constexpr binary(double src) : _x(src) {};
private:
	constexpr binary(unsigned long long _mant, unsigned long _exp, bool _sign) : mant(_mant), exp(_exp), sign(_sign) {}
public:

	// cross-union field access breaks constexpr, however
	constexpr int exponent() const { return (int)exp - (std::numeric_limits<double>::max_exponent - 2); }	// C library frexp convention: numeral 1.0 returns 1
	constexpr double mantissa() const { return binary(mant, std::numeric_limits<double>::max_exponent - 2,sign)._x; }	// C library frexp convention: absolute value in [0.5,1)
};
static_assert(sizeof(binary<double>) == sizeof(double));

template<>
union binary<float>
{
	static_assert(CHAR_BIT * sizeof(float) == 1 + int_log2(std::numeric_limits<float>::max_exponent) + std::numeric_limits<float>::digits);
	static_assert(sizeof(unsigned long) == sizeof(float));

	static constexpr const auto total_bits = 1 + int_log2(std::numeric_limits<float>::max_exponent) + std::numeric_limits<float>::digits;
	static constexpr const auto raw_max_exponent = 2 * ((1ULL << int_log2(std::numeric_limits<float>::max_exponent)) - 1) + 1;

	float _x;
	struct {
#ifdef ZAIMONI_LITTLE_ENDIAN
		unsigned long mant : std::numeric_limits<float>::digits - 1;	// leading 1 doesn't count
		unsigned long exp : int_log2(std::numeric_limits<float>::max_exponent) + 1;
		unsigned long sign : 1;
#else
#error "need to implement binary<float> for big-endian architectures"
#endif
	};

	constexpr binary(float src) : _x(src) {};
private:
	constexpr binary(unsigned long _mant, unsigned long _exp, bool _sign) : mant(_mant), exp(_exp), sign(_sign) {}
public:

	// cross-union field access breaks constexpr, however
	constexpr int exponent() const { return (int)exp - (std::numeric_limits<float>::max_exponent - 2); }	// C library frexp convention: numeral 1.0 returns 1
	constexpr double mantissa() const { return binary(mant, std::numeric_limits<float>::max_exponent - 2, sign)._x; }	// C library frexp convention: absolute value in [0.5,1)
};
static_assert(sizeof(binary<float>) == sizeof(float));

// XXX extending cmath functions to integers with templates does not work (templates are lower priority than functions
// when resolving overloads)
// \todo? disconnect from C standard library (and DLL calls) by using above
template<class T>
std::enable_if_t<std::is_floating_point_v<std::remove_cv_t<std::remove_reference_t<T> > >, bool> isINF(T x)
{
	return std::isinf(x);
}

template<class T>
typename std::enable_if_t<std::is_floating_point_v<T>, bool> isFinite(T x)
{
//	return binary<std::remove_cv_t<std::remove_reference_t<T> > >(x).exponent() <= std::numeric_limits<std::remove_cv_t<std::remove_reference_t<T> >>::max_exponent;
	return std::isfinite(x);
}

template<class T>
std::enable_if_t<std::is_floating_point_v<std::remove_cv_t<std::remove_reference_t<T> > >, bool> isNaN(T x)
{
	return std::isnan(x);
}

template<class T>
std::enable_if_t<std::is_floating_point_v<T>, bool> signBit(T x)
{
	return std::signbit(x);
}

template<class T>
std::enable_if_t<std::is_floating_point_v<T>, std::remove_const_t<T> > scalBn(T x, int scale)
{
	return std::scalbn(x, scale);
}

// not guaranteed effective for long double
// it is possible to optimize this with reinterpret_cast goo
// probably should fix the constants to cope with non-binary floating point
template<std::floating_point F> uintmax_t _mantissa_as_int(F mantissa)
{
	uintmax_t ret = 0;
	while (0.0<mantissa) {
		ret <<= 1;
		const bool have_bit = (F(0.5) <= mantissa);
		if (have_bit) ret += 1;
		mantissa = scalbn(mantissa, 1);
		mantissa -= have_bit;
	}
	return ret;
}

// for integer types, this just discards factors of two.  Definitions are to play nice with floating-point arithmetic
template<std::unsigned_integral U> uintmax_t _mantissa_as_int(U mantissa)
{
	uintmax_t ret = mantissa;
	if (0 == ret) return;
	while (0 == (ret & 1)) ret >>= 1;
	return ret;
}

template<std::signed_integral I> uintmax_t _mantissa_as_int(I mantissa)
{
	uintmax_t ret = (0 <= mantissa ? mantissa : (-std::numeric_limits<I>::max() <= mantissa ? -mantissa : (unsigned long long)(std::numeric_limits<I>::max()) + 1ULL));
	if (0 == ret) return 0;
	while (0 == (ret & 1)) ret >>= 1;
	return ret;
}

template<class T>
typename std::enable_if<std::is_floating_point<T>::value, std::pair<int, uintmax_t>>::type mantissa_bits(T mantissa)	// cmath target
{
	std::pair<int, uintmax_t> ret(0, 1);

	while (0.0 < mantissa) {
		ret.first++;
		ret.second <<= 1;
		const bool have_bit = (T(0.5) <= mantissa);
		if (have_bit) ret.second += 1;
		mantissa = scalbn(mantissa, 1);
		mantissa -= have_bit;
	}
	return ret;
}

template<class T>
typename std::enable_if<std::is_floating_point<T>::value, int>::type mantissa_bitcount(T mantissa)	// cmath target
{
	int ret = 0;

	while (0.0 < mantissa) {
		ret++;
		const bool have_bit = (T(0.5) <= mantissa);
		mantissa = scalbn(mantissa, 1);
		mantissa -= have_bit;
	}
	return ret;
}

template<class T>
typename std::enable_if<std::is_floating_point<T>::value, bool>::type delta_cancel(T& lhs, T& rhs, T delta)
{
	lhs += delta;
	rhs -= delta;
	return 0.0 == rhs;
}

template<class T>
class _fp_stats	// odd name avoids conflicting with an earlier prototype, below.  Optimized for Zaimoni.STL/var.hpp
{
	static_assert(std::is_floating_point<T>::value, "need floating point numeral type");
protected:
	mutable T _mantissa;
	mutable int _exponent;
	mutable bool _valid;
public:
	_fp_stats() : _valid(false) {};
	_fp_stats(typename const_param<T>::type src) : _valid(true) {
		_mantissa = frexp(src, &_exponent);
	};

	void invalidate_stats() { _valid = false; }
	bool valid() const { return _valid; }
	void init_stats(typename const_param<T>::type x) const {
		_mantissa = frexp(x, &_exponent);
		_valid = true;
	}

	// precondition: valid
	// precondition: incoming lb/ub are initialized appropriately
	void scal_bn_safe_range(intmax_t& lb, intmax_t& ub) const {
		if (0 == _mantissa) return;
		auto _lb = std::numeric_limits<T>::min_exponent - _exponent;
		auto _ub = std::numeric_limits<T>::max_exponent - _exponent;
		if (0 < _lb) _lb = 0;
		if (0 > _ub) _ub = 0;
		if (lb < _lb) lb = _lb;
		if (ub > _ub) ub = _ub;
	}

	// precondition: valid
	bool is_scal_bn_identity() const { return std::numeric_limits<T>::max_exponent < _exponent; }	// 0, infinity, or NaN

	// precondition: valid
	intmax_t ideal_scal_bn() const { return is_scal_bn_identity() ? 0 : _exponent - 1; }
};


template<>
class _fp_stats<uintmax_t>
{
protected:
	mutable uintmax_t _mantissa;
	mutable int _exponent;
	mutable bool _valid;
public:
	_fp_stats() : _valid(false) {};
	_fp_stats(uintmax_t src) : _valid(true), _mantissa(src), _exponent(1) {
		_find_exponent();
	};

	void invalidate_stats() { _valid = false; }
	bool valid() const { return _valid; }
	void init_stats(uintmax_t x) const {
		_mantissa = x;
		_exponent = 1;
		_valid = true;
		_find_exponent();
	}

	// precondition: valid
	// precondition: incoming lb/ub are initialized appropriately
	void scal_bn_safe_range(intmax_t& lb, intmax_t& ub) const {
		if (0 == _mantissa) return;
		intmax_t _lb = _find_min_scalbn();
		intmax_t _ub = _exponent - 1;

		if (lb < _lb) lb = _lb;
		if (ub > _ub) ub = _ub;
	}

	// precondition: valid
	bool is_scal_bn_identity() const { return 0 == _mantissa; }	// 0, infinity, or NaN

	// precondition: valid
	intmax_t ideal_scal_bn() const { return is_scal_bn_identity() ? 0 : _exponent - 1; }

private:
	void _find_exponent() const {
		if (0 != _mantissa) {
			while (0 == _mantissa % 2) {
				++_exponent;
				_mantissa /= 2;
			}
		}
	}

	intmax_t _find_min_scalbn() const {
		static constexpr const auto tripwire = std::numeric_limits<uintmax_t>::max() / 2;
		auto test = _mantissa;
		intmax_t ret = 0;
		while (tripwire >= test) {
			--ret;
			test *= 2;
		}
		ret += (_exponent - 1);
		return ret;
	}
};

template<>
class _fp_stats<intmax_t>
{
protected:
	mutable intmax_t _mantissa;
	mutable int _exponent;
	mutable bool _valid;
public:
	_fp_stats() : _valid(false) {};
	_fp_stats(intmax_t src) : _valid(true) {
		_find_exponent();
	};

	void invalidate_stats() { _valid = false; }
	bool valid() const { return _valid; }
	void init_stats(intmax_t x) const {
		_mantissa = x;
		_exponent = 1;
		_valid = true;
		_find_exponent();
	}

	// precondition: valid
	// precondition: incoming lb/ub are initialized appropriately
	void scal_bn_safe_range(intmax_t& lb, intmax_t& ub) const {
		if (0 == _mantissa) return;
		intmax_t _lb = _find_min_scalbn();
		intmax_t _ub = _exponent - 1;

		if (lb < _lb) lb = _lb;
		if (ub > _ub) ub = _ub;
	}

	// precondition: valid
	bool is_scal_bn_identity() const { return 0 == _mantissa; }	// 0, infinity, or NaN

	// precondition: valid
	intmax_t ideal_scal_bn() const { return is_scal_bn_identity() ? 0 : _exponent - 1; }

private:
	void _find_exponent() const {
		if (0 != _mantissa) {
			while (0 == _mantissa % 2) {
				++_exponent;
				_mantissa /= 2;
			}
		}
	}

	intmax_t _find_min_scalbn() const {
		static constexpr const auto tripwire = std::numeric_limits<intmax_t>::max() / 2;
		static constexpr const auto tripwire2 = std::numeric_limits<intmax_t>::min() / 2;
		auto test = _mantissa;
		intmax_t ret = 0;
		if (0 < test) {
			while (tripwire >= test) {
				--ret;
				test *= 2;
			}
		}
		else {
			while (tripwire2 <= test) {
				--ret;
				test *= 2;
			}
		}
		ret += (_exponent - 1);
		return ret;
	}
};

namespace math {

// alternate approach
template<std::floating_point F>
class edit_fp {
	F& _x;	// non-copyable
	int _exponent;
	F _mantissa;

public:
	edit_fp() = delete;
	explicit edit_fp(F& src) noexcept : _x(src),_mantissa(frexp(_x, &_exponent)) {}
	edit_fp(const edit_fp& src) = delete;
	edit_fp(edit_fp&& src) = delete;
	~edit_fp() = default;
	edit_fp& operator=(const edit_fp& src) = delete;
	edit_fp& operator=(edit_fp&& src) = delete;

	auto exponent() const { return _exponent; }
	auto mantissa() const { return _mantissa; }

	template<std::floating_point F2> bool rebalance(edit_fp<F2>& rhs) {
		if (1 == _exponent) return false;
		const int delta_lhs_exp = _exponent - 1;
		const int abs_delta_lhs_exp = (0 < delta_lhs_exp ? delta_lhs_exp : -delta_lhs_exp);
		const int clearance = (0 < delta_lhs_exp ? std::numeric_limits<F2>::max_exponent - rhs.exponent() : rhs.exponent() - std::numeric_limits<F2>::min_exponent);
		if (0 == clearance) return false;
		const int abs_delta = (abs_delta_lhs_exp < clearance ? abs_delta_lhs_exp : clearance);
		const int delta_exp = (0 < delta_lhs_exp ? abs_delta : -abs_delta);
		_x = scalbn(_x, -delta_exp);
		_exponent -= delta_exp;
		rhs._x = scalbn(rhs._x, delta_exp);
		rhs._exponent += delta_exp;
		return true;
	}
};

template<class T>
class fp_stats	// optimized for Iskandria's overprecise.hpp
{
	static_assert(std::is_floating_point_v<T>); // cannot use concept here -- need to specialize this
	int _exponent;
	T _mantissa;

public:
	fp_stats() = delete;
	explicit fp_stats(T src) { assert(0.0 != src); assert(isFinite(src)); _mantissa = frexp(src, &_exponent); }
	fp_stats(const fp_stats& src) = delete;
	fp_stats(fp_stats&& src) = default;
	~fp_stats() = default;
	void operator=(const fp_stats& src) = delete;
	fp_stats& operator=(fp_stats&& src) = default;
	void operator=(T src) { assert(0.0 != src); assert(isFinite(src)); _mantissa = frexp(src, &_exponent); }

	// while we don't want to copy, we do want to swap
	void swap(fp_stats& rhs) { std::swap(_exponent, rhs._exponent); std::swap(_mantissa, rhs._mantissa); }

	// frexp convention: mantissa is [0.5,1.0) and exponent of 1.0 is 1
	int exponent() const { return _exponent; };
	double mantissa() const { return _mantissa; };
	uintmax_t int_mantissa() const { return _mantissa_as_int(_mantissa); }
	uintmax_t divisibilty_test() const { return _mantissa_as_int(_mantissa); }
	int safe_2_n_multiply() const { return std::numeric_limits<T>::max_exponent - _exponent; };
	int safe_2_n_divide() const { return _exponent - std::numeric_limits<T>::min_exponent; };

	T delta(int n) const { return copysign(scalbn(0.5, n), _mantissa); };	// usually prepared for subtractive cancellation

	// these are in terms of absolute value
	std::pair<int, int> safe_subtract_exponents()
	{
		std::pair<int, int> ret(_exponent - std::numeric_limits<double>::digits, _exponent);
		if (0.5 == _mantissa || -0.5 == _mantissa) ret.first--;
		if (std::numeric_limits<T>::min_exponent > ret.second) ret.second = std::numeric_limits<T>::min_exponent;
		if (std::numeric_limits<T>::min_exponent > ret.first) ret.first = std::numeric_limits<T>::min_exponent;
		return ret;
	}

	std::pair<int, int> safe_add_exponents()	// not for denormals
	{
		std::pair<int, int> ret(_exponent - std::numeric_limits<T>::digits, _exponent);
		const double abs_mantissa = (signBit(_mantissa) ? -_mantissa : _mantissa);
		if (std::numeric_limits<T>::digits < mantissa_bitcount(abs_mantissa)) {
			double mantissa_delta = 0.5;
			while (1.0 - mantissa_delta < abs_mantissa)
			{
				assert(ret.first < ret.second);
				ret.second--;
				mantissa_delta = scalbn(mantissa_delta, -1);
			}
		}
		return ret;
	}
};

namespace bits {

	template<std::floating_point T> bool sum_overflows(T lhs, T rhs)
	{
		if (0 == lhs) return false;
		if (0 == rhs) return false;
		if ((0 < lhs) != (0 < rhs)) return false;	// NaN is not overflow
		if (std::isinf(lhs)) return false;
		if (std::isinf(rhs)) return false;

		int exponent[2] = { 0,0 };
		long double mantissa[2] = { frexp(lhs, exponent + 0) , frexp(rhs, exponent + 1) };
		if (std::numeric_limits<long double>::max_exponent - 2 <  exponent[0] && std::numeric_limits<long double>::max_exponent - 2 <  exponent[1]) return true;
		if (std::numeric_limits<long double>::max_exponent - 2 >= exponent[0] && std::numeric_limits<long double>::max_exponent - 2 >= exponent[1]) return false;
		// corner case
		const int gt_index = (exponent[0] < exponent[1]);
		const int lt_index = 1 - gt_index;
		return 2 - mantissa[gt_index] <= scalbn(mantissa[lt_index], exponent[lt_index] - exponent[gt_index]);	// XXX \todo verify this
	}

	template<std::floating_point T> int product_denormalizes(T lhs, T rhs)
	{
		if (0 == lhs) return false;
		if (0 == rhs) return false;
		if (std::isinf(lhs)) return false;
		if (std::isinf(rhs)) return false;

		int exponent[2] = { 0,0 };
		long double mantissa[2] = { frexp(lhs, exponent + 0) , frexp(rhs, exponent + 1) };
		int new_exponent = exponent[0] + exponent[1] - 1;
		if (0.5l > mantissa[0] * mantissa[1]) --new_exponent;
		if (std::numeric_limits<T>::max_exponent <= new_exponent) return new_exponent - std::numeric_limits<T>::max_exponent + 1;
		if (std::numeric_limits<T>::min_exponent >= new_exponent) return new_exponent - std::numeric_limits<T>::min_exponent - 1;

		return 0;
	}

	template<std::floating_point T> int rearrange_sum(T& lhs, T& rhs)
	{
//		assert(!trivial_sum(lhs, rhs));
		bool any_change = false;

		// 0: lhs
		// 1: rhs
	hard_restart:
		const int fp_type[2] = { fpclassify(lhs) , fpclassify(rhs) };
		const bool is_negative[2] = { std::signbit(lhs) , std::signbit(rhs) };

		// epsilon exponent is simply -std::numeric_limits<T>::digits+1 (+1 from bias)
		// remember: 1.0 maps to exponent 1, mantissa 0.5
	restart:
		fp_stats<T> lhs_stats(lhs);
		fp_stats<T> rhs_stats(rhs);
		if (rhs_stats.exponent() > lhs_stats.exponent()) {
			// force lhs larger than rhs
			std::swap(lhs, rhs);
			goto hard_restart;
		}
		const int exponent_delta = rhs_stats.exponent() - lhs_stats.exponent();

		if (is_negative[0] == is_negative[1]) {
			// same sign
			if (lhs == rhs && std::numeric_limits<T>::max_exponent > lhs_stats.exponent()) {
				lhs = scalbn(lhs, 1);
				rhs = 0.0;
				return -1;
			}
			// a denormal acts like it has exponent std::numeric_limits<T>::min_exponent - 1
			if (FP_SUBNORMAL == fp_type[0] /* && FP_SUBNORMAL == fp_type[1] */) {
				T tmp = copysign(std::numeric_limits<T>::min(), lhs);
				// lhs+rhs = (lhs+tmp)+(rhs-tmp)
				rhs -= tmp;	// now opp-sign denormal
				rhs += lhs;
				lhs = tmp;
				if (0.0 == rhs) return -1;
				any_change = true;
				goto hard_restart;	// could be more clever here if breaking const
			}
			else if (FP_SUBNORMAL == fp_type[1]) return 2 * any_change;	// MingW64 infinite loop stopper

			if (0 == exponent_delta && std::numeric_limits<T>::max_exponent > lhs_stats.exponent()) {	// same idea as above
				T tmp = copysign(scalbn(1.0, lhs_stats.exponent() + 1), (is_negative[0] ? -1.0 : 1.0));
				rhs -= tmp;
				rhs += lhs;
				lhs = tmp;
				any_change = true;
				goto restart;
			}
			const std::pair<int, int> lhs_safe(lhs_stats.safe_add_exponents());
			const std::pair<int, int> rhs_safe(rhs_stats.safe_subtract_exponents());
			if (lhs_safe.first > rhs_safe.second) return -2 * any_change;

			if (delta_cancel(lhs, rhs, rhs_stats.delta(rhs_safe.second))) return -1;
			any_change = true;
			if (std::numeric_limits<T>::min_exponent + std::numeric_limits<T>::digits >= rhs_stats.exponent()) goto hard_restart;	// may have just denormalized
			goto restart;
		} else {
			// opposite sign: cancellation
			if (0 == exponent_delta) {
				lhs += rhs;
				rhs = 0.0;
				return -1;
			}
			if (   (FP_SUBNORMAL == fp_type[0] || lhs_stats.exponent() == std::numeric_limits<T>::min_exponent)
				&& (FP_SUBNORMAL == fp_type[1] || lhs_stats.exponent() == std::numeric_limits<T>::min_exponent)) {
				lhs += rhs;
				rhs = 0.0;
				return -1;
			}
			const std::pair<int, int> lhs_safe(lhs_stats.safe_subtract_exponents());
			const std::pair<int, int> rhs_safe(rhs_stats.safe_subtract_exponents());
			// lhs larger
			if (lhs_safe.first > rhs_safe.second) return -2 * any_change;
			if (delta_cancel(lhs, rhs, rhs_stats.delta(rhs_safe.second))) return -1;
			any_change = true;
			if (std::numeric_limits<T>::min_exponent + std::numeric_limits<T>::digits >= rhs_stats.exponent()) goto hard_restart;	// may have just denormalized
			goto restart;
		}
	}
}	// namespace bits

template<>
struct would_overflow<long double>
{
	static bool sum(long double lhs, long double rhs) { return bits::sum_overflows(lhs, rhs); }
	static int product(long double lhs, long double rhs) { return bits::product_denormalizes(lhs, rhs); }
	static int square(long double lhs) { return bits::product_denormalizes(lhs, lhs); }
};

template<>
struct would_overflow<double>
{
	static bool sum(double lhs, double rhs) { return bits::sum_overflows(lhs, rhs); }
	static int product(double lhs, double rhs) { return bits::product_denormalizes(lhs, rhs); }
	static int square(double lhs) { return bits::product_denormalizes(lhs, lhs); }
};

template<>
struct would_overflow<float>
{
	static bool sum(float lhs, float rhs) { return bits::sum_overflows(lhs, rhs); }
	static int product(float lhs, float rhs) { return bits::product_denormalizes(lhs, rhs); }
	static int square(float lhs) { return bits::product_denormalizes(lhs, lhs); }
};

}	// namespace math
}	// namespace zaimoni

#endif
