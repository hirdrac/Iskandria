// Zaimoni.STL/augment.STL/cmath

#ifndef ZAIMONI_AUGMENT_STL_TYPE_CMATH
#define ZAIMONI_AUGMENT_STL_TYPE_CMATH 1

#include "type_traits"
#include "../Logging.h"
#include <cmath>
#include <utility>

// namespace setup.  Anything we would want for high-precision arithmetic should be imported into both of our namespaces.
// Favor once-and-only-once over technical efficiency.

namespace zaimoni {

	using std::fpclassify;
	using std::sqrt;

namespace math {

	using std::fpclassify;
	using std::sqrt;

}	// namespace math

}	// namespace zaimoni

// intentionally close and re-open namespaces to visually separate intent (reference vs. new definitions)

namespace zaimoni {

// XXX extending cmath functions to integers with templates does not work (templates are lower priority than functions
// when resolving overloads)
template<class T>
constexpr typename std::enable_if<std::is_floating_point<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::value, bool>::type isINF(T x)
{
	return std::isinf(x);
}

template<class T>
constexpr typename std::enable_if<std::is_floating_point<T>::value, bool>::type isFinite(T x)
{
	return std::isfinite(x);
}

template<class T>
constexpr typename std::enable_if<std::is_floating_point<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::value, bool>::type isNaN(T x)
{
	return std::isnan(x);
}

template<class T>
constexpr typename std::enable_if<std::is_floating_point<T>::value, bool>::type signBit(T x)
{
	return std::signbit(x);
}

template<class T>
constexpr typename std::enable_if<std::is_floating_point<T>::value, typename std::remove_const<T>::type>::type scalBn(T x, int scale)
{
	return std::scalbn(x, scale);
}

// not guaranteed effective for long double
// it is possible to optimize this with reinterpret_cast goo
// probably should fix the constants to cope with non-binary floating point
template<class T>
typename std::enable_if<std::is_floating_point<T>::value, uintmax_t>::type _mantissa_as_int(T mantissa)
{
	uintmax_t ret = 0;
	while (0.0<mantissa)
	{
		ret <<= 1;
		const bool have_bit = (T(0.5) <= mantissa);
		if (have_bit) ret += 1;
		mantissa = scalbn(mantissa, 1);
		mantissa -= have_bit;
	}
	return ret;
}

template<class T>
typename std::enable_if<std::is_floating_point<T>::value, std::pair<int, uintmax_t>>::type mantissa_bits(T mantissa)	// cmath target
{
	std::pair<int, uintmax_t> ret(0, 1);

	while (0.0 < mantissa) {
		ret.first++;
		ret.second <<= 1;
		const bool have_bit = (T(0.5) <= mantissa);
		if (have_bit) ret.second += 1;
		mantissa = scalbn(mantissa, 1);
		mantissa -= have_bit;
	}
	return ret;
}

template<class T>
typename std::enable_if<std::is_floating_point<T>::value, int>::type mantissa_bitcount(T mantissa)	// cmath target
{
	int ret = 0;

	while (0.0 < mantissa) {
		ret++;
		const bool have_bit = (T(0.5) <= mantissa);
		mantissa = scalbn(mantissa, 1);
		mantissa -= have_bit;
	}
	return ret;
}

template<class T>
typename std::enable_if<std::is_floating_point<T>::value, bool>::type delta_cancel(T& lhs, T& rhs, T delta)
{
	lhs += delta;
	rhs -= delta;
	return 0.0 == rhs;
}

namespace math {

template<class T>
class fp_stats
{
	ZAIMONI_STATIC_ASSERT(std::is_floating_point<T>::value);
private:
	int _exponent;
	T _mantissa;
public:
	fp_stats() = delete;
	explicit fp_stats(T src) { assert(0.0 != src); assert(isFinite(src)); _mantissa = frexp(src, &_exponent); }
	fp_stats(const fp_stats& src) = delete;
	fp_stats(fp_stats&& src) = default;
	~fp_stats() = default;
	void operator=(const fp_stats& src) = delete;
	fp_stats& operator=(fp_stats&& src) = default;
	void operator=(T src) { assert(0.0 != src); assert(isFinite(src)); _mantissa = frexp(src, &_exponent); }

	// while we don't want to copy, we do want to swap
	void swap(fp_stats& rhs) { std::swap(_exponent, rhs._exponent); std::swap(_mantissa, rhs._mantissa); }

	// frexp convention: mantissa is [0.5,1.0) and exponent of 1.0 is 1
	int exponent() const { return _exponent; };
	double mantissa() const { return _mantissa; };
	uintmax_t int_mantissa() const { return _mantissa_as_int(_mantissa); }
	uintmax_t divisibilty_test() const { return _mantissa_as_int(_mantissa); }
	int safe_2_n_multiply() const { return std::numeric_limits<T>::max_exponent - _exponent; };
	int safe_2_n_divide() const { return _exponent - std::numeric_limits<T>::min_exponent; };

	T delta(int n) const { return copysign(scalbn(0.5, n), _mantissa); };	// usually prepared for subtractive cancellation

	// these are in terms of absolute value
	std::pair<int, int> safe_subtract_exponents()
	{
		std::pair<int, int> ret(_exponent - std::numeric_limits<double>::digits, _exponent);
		if (0.5 == _mantissa || -0.5 == _mantissa) ret.first--;
		if (std::numeric_limits<T>::min_exponent > ret.second) ret.second = std::numeric_limits<T>::min_exponent;
		if (std::numeric_limits<T>::min_exponent > ret.first) ret.first = std::numeric_limits<T>::min_exponent;
		return ret;
	}

	std::pair<int, int> safe_add_exponents()	// not for denormals
	{
		std::pair<int, int> ret(_exponent - std::numeric_limits<T>::digits, _exponent);
		const double abs_mantissa = (signBit(_mantissa) ? -_mantissa : _mantissa);
		double mantissa_delta = 0.5;
		while (1.0 - mantissa_delta < abs_mantissa)
		{
			assert(ret.first<ret.second);
			ret.second--;
			mantissa_delta = scalbn(mantissa_delta, -1);
		}
		return ret;
	}
};

namespace bits {

	template<class T>
	typename std::enable_if<std::is_floating_point<T>::value, bool>::type sum_overflows(T lhs, T rhs)
	{
		if (0 == lhs) return false;
		if (0 == rhs) return false;
		if ((0 < lhs) != (0 < rhs)) return false;	// NaN is not overflow
		if (std::isinf(lhs)) return false;
		if (std::isinf(rhs)) return false;

		int exponent[2] = { 0,0 };
		long double mantissa[2] = { frexp(lhs, exponent + 0) , frexp(rhs, exponent + 1) };
		if (std::numeric_limits<long double>::max_exponent - 2 <  exponent[0] && std::numeric_limits<long double>::max_exponent - 2 <  exponent[1]) return true;
		if (std::numeric_limits<long double>::max_exponent - 2 >= exponent[0] && std::numeric_limits<long double>::max_exponent - 2 >= exponent[1]) return false;
		// corner case
		const int gt_index = (exponent[0] < exponent[1]);
		const int lt_index = 1 - gt_index;
		return 2 - mantissa[gt_index] <= scalbn(mantissa[lt_index], exponent[lt_index] - exponent[gt_index]);	// XXX \todo verify this
	}
}

template<>
struct would_overflow<long double>
{
	static bool sum(long double lhs, long double rhs) { return bits::sum_overflows(lhs, rhs); }
};

template<>
struct would_overflow<double>
{
	static bool sum(double lhs, double rhs) { return bits::sum_overflows(lhs, rhs); }
};

template<>
struct would_overflow<float>
{
	static bool sum(float lhs, float rhs) { return bits::sum_overflows(lhs, rhs); }
};

}	// namespace math
}	// namespace zaimoni

#endif
